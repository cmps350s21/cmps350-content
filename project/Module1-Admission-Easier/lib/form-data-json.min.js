// form-data-json-convert | version: 1.2.2 | url: https://brainfoolong.github.io/form-data-json/example/playground.html
'use strict';

function _typeof(a) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (a) {
        return typeof a
    } : function (a) {
        return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a
    }, _typeof(a)
}

function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(a, b) {
    for (var c, d = 0; d < b.length; d++) c = b[d], c.enumerable = c.enumerable || !1, c.configurable = !0, "value" in c && (c.writable = !0), Object.defineProperty(a, c.key, c)
}

function _createClass(a, b, c) {
    return b && _defineProperties(a.prototype, b), c && _defineProperties(a, c), a
}

function _defineProperty(a, b, c) {
    return b in a ? Object.defineProperty(a, b, {
        value: c,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : a[b] = c, a
}

var FormDataJson = function () {
    function a() {
        _classCallCheck(this, a)
    }

    return _createClass(a, null, [{
        key: "getInputValue", value: function getInputValue(b) {
            if (b instanceof HTMLSelectElement) {
                for (var c, d = [], e = 0; e < b.options.length; e++) c = b.options[e], c.selected && d.push(("undefined" == typeof c.value ? c.text : c.value).toString());
                return b.multiple ? d : d.length ? d[0] : null
            }
            return b instanceof HTMLInputElement && -1 < a.checkedInputTypes.indexOf(b.type.toLowerCase()) ? b.checked ? b.value : null : b.value
        }
    }, {
        key: "setInputValue", value: function setInputValue(b, c) {
            var d = (b.type || "text").toLowerCase();
            if (b instanceof HTMLInputElement && -1 < a.checkedInputTypes.indexOf(d)) b.checked = c === b.value; else if (b instanceof HTMLSelectElement) {
                a.isArray(c) || (c = [c]);
                for (var g = 0; g < b.options.length; g++) {
                    var e = b.options[g], f = "undefined" == typeof e.value ? e.text : e.value;
                    e.selected = -1 < c.indexOf(f)
                }
            } else if (b instanceof HTMLInputElement && "file" === d) ; else b.value = c
        }
    }, {
        key: "flattenJsonFormValues", value: function flattenJsonFormValues(b, c, d) {
            for (var e in d = d || {}, b) {
                var f = c ? c + "[" + e + "]" : e;
                "object" === _typeof(b[e]) && null !== b[e] ? d = a.flattenJsonFormValues(b[e], f, d) : d[f] = b[e]
            }
            return d
        }
    }, {
        key: "formToJson", value: function formToJson(b, c, d) {
            if (c && !(c instanceof FormDataJsonOptions)) return void console.error("Options are not an instance of FormDataJsonOptions");
            c = c || new FormDataJsonOptions;
            for (var e = {}, f = b.querySelectorAll("select, textarea, input, button"), g = {}, h = [], k = 0; k < f.length; k++) {
                var l = f[k], m = (l.type || "text").toLowerCase();
                if (l.name && 0 !== l.name.length && (c.includeDisabled || !l.disabled)) {
                    var n = a.getInputValue(l);
                    if (!c.includeButtonValues && (l instanceof HTMLButtonElement || -1 < a.buttonInputTypes.indexOf(m))) continue;
                    for (var p, q = l instanceof HTMLSelectElement && l.multiple, r = e, s = l.name.split("["), t = s.length, u = 0; u < t; u++) if (p = s[u], 0 < u && (p = p.substr(0, p.length - 1)), 0 === p.length && ("undefined" == typeof g[l.name] && (g[l.name] = 0), p = g[l.name].toString(), g[l.name]++), q && u === s.length - 2) {
                        r[p] = n;
                        break
                    } else if (u === s.length - 1) {
                        if ("radio" === m && "undefined" != typeof r[p]) break;
                        r[p] = n, !c.includeUncheckedAsNull && -1 < a.checkedInputTypes.indexOf(m) && null === n && delete r[p], "file" === m && (delete r[p], d && h.push({
                            object: r,
                            name: p,
                            input: l
                        }))
                    } else "object" !== _typeof(r[p]) && (r[p] = {}), r = r[p]
                }
            }
            return h.length ? function () {
                for (var a = 0, b = 0, c = function (c) {
                    var f = h[c], g = f.object;
                    b += f.input.files.length;
                    for (var i = function (c) {
                        var h = f.input.files[c], i = new FileReader;
                        i.onload = function () {
                            "undefined" == typeof g[f.name] && (g[f.name] = f.input.multiple ? [] : null), f.input.multiple ? g[f.name].push(i.result) : g[f.name] = i.result, a++, a === b && d(e)
                        }, i.readAsDataURL(h)
                    }, j = 0; j < f.input.files.length; j++) i(j)
                }, f = 0; f < h.length; f++) c(f)
            }() : d && d(e), e
        }
    }, {
        key: "fillFormFromJsonValues", value: function fillFormFromJsonValues(b, c, d, e) {
            if (d && !(d instanceof FormDataJsonOptions)) return void console.error("Options are not an instance of FormDataJsonOptions");
            if (c) {
                d = d || new FormDataJsonOptions, d.unsetAllInputsOnFill && a.unsetFormInputs(b);
                for (var f = {}, g = {}, h = b.querySelectorAll("select, textarea, input, button"), k = 0; k < h.length; k++) {
                    var l = h[k], m = l.name, n = l instanceof HTMLSelectElement && l.multiple;
                    if (m && 0 !== m.length && (g[m] = l, m.match(/\[\]/))) {
                        var s = m.split("[]");
                        n && (s = m.substr(0, m.length - 2).split("[]"));
                        for (var o = "", p = 0; p < s.length; p++) s[p].length && (o += s[p] + "[]", "undefined" == typeof f[o] && (f[o] = -1), f[o]++, o = o.replace(/\[\]/, "[" + f[o] + "]"));
                        n && (o += "[]"), g[o] = l
                    }
                }
                for (var t in c) {
                    var q = c[t], r = e ? e + "[" + t + "]" : t;
                    a.isArray(q) && (r += "[]");
                    var u = g[r] || null;
                    "object" !== _typeof(q) || a.isArray(q) ? u && a.setInputValue(u, q) : a.fillFormFromJsonValues(b, q, d, r)
                }
            }
        }
    }, {
        key: "unsetFormInputs", value: function unsetFormInputs(b) {
            for (var c, d = b.querySelectorAll("select, textarea, input"), e = 0; e < d.length; e++) (c = (d[e].type || "text").toLowerCase(), !(-1 < a.buttonInputTypes.indexOf(c))) && a.setInputValue(d[e], null)
        }
    }, {
        key: "isArray", value: function isArray(a) {
            return "object" === _typeof(a) && "[object Array]" === Object.prototype.toString.call(a)
        }
    }]), a
}();
_defineProperty(FormDataJson, "buttonInputTypes", ["button", "submit", "reset", "image"]), _defineProperty(FormDataJson, "checkedInputTypes", ["checkbox", "radio"]);
var FormDataJsonOptions = function () {
    function a(b) {
        _classCallCheck(this, a), this.merge(a.defaults), this.merge(b)
    }

    return _createClass(a, [{
        key: "merge", value: function merge(a) {
            if ("object" === _typeof(a)) for (var b in a) this[b] = a[b]
        }
    }]), a
}();
_defineProperty(FormDataJsonOptions, "defaults", {
    includeDisabled: !1,
    includeUncheckedAsNull: !1,
    includeButtonValues: !1,
    unsetAllInputsOnFill: !1
}), "undefined" != typeof module && (module.exports = {
    FormDataJson: FormDataJson,
    FormDataJsonOptions: FormDataJsonOptions
});
